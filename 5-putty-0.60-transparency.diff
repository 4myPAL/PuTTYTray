=== putty.h
==================================================================
--- putty.h	(revision 7489)
+++ putty.h	(local)
@@ -598,6 +598,11 @@
     FontSpec widefont;
     FontSpec wideboldfont;
     int shadowboldoffset;
+
+	/*
+	 * HACK: PuttyTray / Transparency
+	 */
+	int transparency;
 };
 
 /*
=== settings.c
==================================================================
--- settings.c	(revision 7489)
+++ settings.c	(local)
@@ -328,6 +328,13 @@
     write_setting_i(sesskey, "ApplicationCursorKeys", cfg->app_cursor);
     write_setting_i(sesskey, "ApplicationKeypad", cfg->app_keypad);
     write_setting_i(sesskey, "NetHackKeypad", cfg->nethack_keypad);
+
+	/*
+	 * HACK: PuttyTray / Transparency
+	 * Save transparency settings
+	 */
+    write_setting_i(sesskey, "Transparency", cfg->transparency);
+
     write_setting_i(sesskey, "AltF4", cfg->alt_f4);
     write_setting_i(sesskey, "AltSpace", cfg->alt_space);
     write_setting_i(sesskey, "AltOnly", cfg->alt_only);
@@ -616,6 +623,13 @@
     gppi(sesskey, "ApplicationCursorKeys", 0, &cfg->app_cursor);
     gppi(sesskey, "ApplicationKeypad", 0, &cfg->app_keypad);
     gppi(sesskey, "NetHackKeypad", 0, &cfg->nethack_keypad);
+
+	/*
+	 * HACK: PuttyTray / Transparency
+	 * Save transparency settings
+	 */
+	gppi(sesskey, "Transparency", 255, &cfg->transparency);
+
     gppi(sesskey, "AltF4", 1, &cfg->alt_f4);
     gppi(sesskey, "AltSpace", 0, &cfg->alt_space);
     gppi(sesskey, "AltOnly", 0, &cfg->alt_only);
=== windows/wincfg.c
==================================================================
--- windows/wincfg.c	(revision 7489)
+++ windows/wincfg.c	(local)
@@ -334,6 +334,12 @@
 		  dlg_stdcheckbox_handler,
 		  I(offsetof(Config,fullscreenonaltenter)));
 
+	/*
+	 * HACK: PuttyTray / Transparency
+	 */
+	s = ctrl_getset(b, "Window", "main", "Window transparency options");
+	ctrl_editbox(s, "Opacity (50-255)", 't', 30, HELPCTX(no_help), dlg_stdeditbox_handler, I(offsetof(Config,transparency)), I(-1));
+
     /*
      * Windows supports a local-command proxy. This also means we
      * must adjust the text on the `Telnet command' control.
=== windows/window.c
==================================================================
--- windows/window.c	(revision 7489)
+++ windows/window.c	(local)
@@ -198,6 +198,24 @@
 
 static UINT wm_mousewheel = WM_MOUSEWHEEL;
 
+/*
+ * HACK: PuttyTray / Transparency
+ */ 
+BOOL MakeWindowTransparent(HWND hWnd, int factor);
+
+typedef DWORD (WINAPI *PSLWA)(HWND, DWORD, BYTE, DWORD);
+static PSLWA pSetLayeredWindowAttributes = NULL;
+static BOOL initialized = FALSE;
+#if !defined(WS_EX_LAYERED)
+	#define WS_EX_LAYERED	0x00080000
+#endif
+#if !defined(LWA_COLORKEY)
+	#define LWA_COLORKEY	0x00000001
+#endif
+#if !defined(LWA_ALPHA)
+	#define LWA_ALPHA	0x00000002
+#endif
+
 /* Dummy routine, only required in plink. */
 void ldisc_update(void *frontend, int echo, int edit)
 {
@@ -808,6 +826,13 @@
     logpal = NULL;
     init_palette();
 
+	/*
+	 * HACK: PuttyTray / Transparency
+	 */
+	if (cfg.transparency >= 50 && cfg.transparency < 255) {
+		MakeWindowTransparent(hwnd, cfg.transparency);
+	}
+
     term_set_focus(term, GetForegroundWindow() == hwnd);
     UpdateWindow(hwnd);
 
@@ -2159,6 +2184,20 @@
 		if (back)
 		    back->reconfig(backhandle, &cfg);
 
+		/*
+		 * HACK: PuttyTray / Transparency
+		 * Reconfigure
+		 */
+		if (cfg.transparency >= 50) {
+			if (cfg.transparency > 255) {
+				MakeWindowTransparent(hwnd, 255);
+			} else {
+				MakeWindowTransparent(hwnd, cfg.transparency);
+			}
+		} else {
+			MakeWindowTransparent(hwnd, 255);
+		}
+
 		/* Screen size changed ? */
 		if (cfg.height != prev_cfg.height ||
 		    cfg.width != prev_cfg.width ||
@@ -5422,3 +5461,42 @@
     c->len = len;
     PostMessage(hwnd, WM_AGENT_CALLBACK, 0, (LPARAM)c);
 }
+
+/*
+ * HACK: PuttyTray / Transparency
+ * Function to set the window transparency
+ */ 
+BOOL MakeWindowTransparent(HWND hWnd, int factor)
+{
+	// First, see if we can get the API call we need. If we've tried once, we don't need to try again.
+	if (!initialized) {
+		HMODULE hDLL = LoadLibrary("user32");
+		pSetLayeredWindowAttributes = (PSLWA) GetProcAddress(hDLL, "SetLayeredWindowAttributes");
+		initialized = TRUE;
+	}
+	if (pSetLayeredWindowAttributes == NULL) {
+		return FALSE;
+	}
+
+	// Sanity checks
+	if (factor < 0) { return FALSE; }
+	if (factor > 255) { factor = 255; }
+
+	// Make the window transparent
+	if (factor < 255) {
+		// Windows need to be layered to be made transparent. This is done by modifying the extended style bits to contain WS_EX_LAYARED.
+		SetLastError(0);
+		SetWindowLong(hWnd, GWL_EXSTYLE, GetWindowLong(hWnd, GWL_EXSTYLE) | WS_EX_LAYERED);
+		if (GetLastError()) {
+			return FALSE;
+		}
+
+		// Now, we need to set the 'layered window attributes'. This is where the alpha values get set. 
+		return pSetLayeredWindowAttributes (hWnd, RGB(255,255,255), factor, LWA_ALPHA);
+	
+	// Make the window opaque
+	} else {
+		SetWindowLong(hWnd, GWL_EXSTYLE, GetWindowLong(hWnd, GWL_EXSTYLE) & ~WS_EX_LAYERED);
+		return TRUE;
+	}
+}
